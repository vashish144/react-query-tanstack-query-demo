import { useNavigate } from 'react-router-dom';
import { Link, Outlet, useParams } from 'react-router-dom';

import Header from '../Header.jsx';
import { useMutation, useQuery } from '@tanstack/react-query';
import { deleteEvent, fetchEvent, queryClient } from '../../utils/http.js';
import ErrorBlock from '../UI/ErrorBlock.jsx';
import { useState } from 'react';
import Modal from '../UI/Modal.jsx';

export default function EventDetails() {
  const [isDeleting, setIsDeleting] = useState(false)
  const params = useParams();
  const { id } = params;
  const navigate = useNavigate();
  const { data, error, isError, isPending } = useQuery({
    queryKey: ["events", id],
    queryFn: ({ signal }) => fetchEvent({ signal, id })
  })
  const { mutate, isError: isErrorDeleting, error: deleteError, isPending: isDeletingPending } = useMutation({
    mutationFn: deleteEvent, onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["events"], refetchType: 'none' })
      navigate("/events")
    }
  })
  const handleDelete = () => {
    mutate({ id })
  }
  const handleOpenModal = () => {
    setIsDeleting(true)
  }
  const handleCloseModal = () => {
    setIsDeleting(false)
  }
  let content;
  if (isPending) {
    content = <div id='event-details-content' className='center'>
      <p>Fetching event data............</p>
    </div>
  } else if (isError) {
    content = <div id='event-details-content' className='center'> <ErrorBlock title="Failed to load event" message={error.info?.message || "Failed to fetch event details"} /></div>
  } else {
    const formateDate = new Date(data.date).toLocaleDateString('en-US', {
      day: "numeric",
      month: "short",
      year: "numeric"
    })
    content = (
      <>
        <header>
          <h1>{data?.title}</h1>
          <nav>
            <button onClick={handleOpenModal}>Delete</button>
            <Link to="edit">Edit</Link>
          </nav>
        </header>
        <div id="event-details-content">
          <img src={`http://localhost:3000/${data.image}`} alt="" />
          <div id="event-details-info">
            <div>
              <p id="event-details-location">{data.location}</p>
              <time dateTime={`Todo-DateT$Todo-Time`}>{formateDate} @ {data.time}</time>
            </div>
            <p id="event-details-description">{data.description}</p>
          </div>
        </div>
      </>
    )
  }
  return (
    <>
      {
        isDeleting && <Modal onClose={handleCloseModal}>
          <h2>Are you sure?</h2>
          <p>Do you really want to delete this event? This action cannot be undone</p>
          <div className='form-actions'>
            {
              isDeletingPending && <p>Deleting event........</p>
            }
            {
              !isDeletingPending && <>
                <button className='button-text' onClick={handleCloseModal}>Cancel</button>
                <button className='button' onClick={handleDelete}>Delete</button>
              </>

            }
            {
              isErrorDeleting && <ErrorBlock title="Failed to delete event" message={deleteError?.info?.message || "Failed to delete event please try again later"} />
            }
          </div>

        </Modal>
      }
      <Outlet />
      <Header>
        <Link to="/events" className="nav-item">
          View all Events
        </Link>
      </Header>
      <article id="event-details">
        {content}
      </article>
    </>
  );
}
